1.jq的选择器补充:
	1>:表单属性对象过滤器:
		根据input过滤
		根据type的各种值过滤
		根据 选中状态,禁用状态,可用状态过滤
		
	2>子元素过滤器:
		注意语法:$("父级 子级:")   一定要写上 后代选择器  作为第一部分
		
	3>属性过滤器:
		注意语法:$("基本选择器[属性]")
		其他的详细见文档
		
2.操作文本内容,属性,css
	
	1.jq对象.html()
	2.jq对象.text()
	3.jq对象.val(数据)   给文本框设置内容  注意:val设置的值不能用attr取值   
	4.jq对象.attr(参数1,参数2)   参数1:属性名  参数2:属性值  只有参数1 就是取值 
			attr只能获取默认的value值，不能获取动态的value值
	5.jq对象.css(键,值)  或者  jq对象.css({"键":"值","键":"值"})
	
	
3.节点操作:
	内部添加末尾
	1>jq对象.append(需要的节点)
	
		1.任意对象 都可以  :DOM 的或者 jq 都可以
		2.是把整体追加
		3.追加 内部的末尾
	
	2>需要的节点.appendTo(jq对象)
		1.这是 jq的方法
		2.自己往进钻
	******************************************************
	内部添加开头
	1>jq对象.prepend(需要的节点)
	2>需要的节点.prependTo(jq对象)
	
	******************************************************
	外部添加到后面去
	1>jq对象.after()  到后面去

	2>需要插进去的对象.insertAfter()

	*******************************************
	外部添加到前面去
	1>jq对象.befor()  到前面去
	
	2>需要插进去的对象.insertBefore()
	
	
	*******************************************
	删除:
	1>jq对象.remove()    自己删自己，完全清空
				
	2>jq对象.detach()     自己删自己，保留一些属性和方法
	
	3>jq对象.empty()      删除所有子节点
			
	*******************************************
	替换:
	jq对象.replaceWith(指定替换的元素)

	替换的元素.replaceAll(jq对象)
	
	*****************************************
	节点遍历:
	jq对象.each(function(index){  
		index表示每个DOM对象的索引
		this表示每个DOM对象		
	})
	
	*****************************************
	
	
4.入口函数:
	三种书写方式

	$(document).ready(function() {
		
	});


	$().reaady(function  () {
		
	});


	$(function(){

	});
	


	这个事件跟之前的DOM原生事件有啥区别 
	1.jq的入口函数 加载的更快一些: 只负责结构的加载,不等外部资源进入 就开始执行 所以会出现一些问题
	2.window.onload 完全加载完成: 不如 会等 图片的src 文件  link的href文件  全都搞定
	
	问题:当入口函数 需要操作  图片  而图片有可能 还没加载完 就出问题
	
	把操作图片的代码 写在下面
	$(window).load(function(){
		
	})
	
	window.onload = function(){
		
	}
	
******************************************************************************************************************

5.绑定事件的4中方式:
	 jq对象.事件名(function(){   //不可以给 未来元素绑定 事件
	
	})
	
	jq对象.bind("事件名",function(){   //不可以给 未来元素绑定 事件
	
	})
	
	******************************************************************************
	
	绑定事件方式2:delegate   事件委托  就是为了给 未来元素绑定事件
	调用者:父级标签
	参数1:标签名 参数2事件名 参数3匿名函数
	jq对象.delegate("","",function(){
	
	})

	
	******************************************************************************
	方式3 on   整合了两种 方式 既可以直接绑定  也可以委托到父级

	jq对象.on("事件名",function(){
	
	});
	
	
	委托模式:
	参数1:事件名
	参数2:子标签
	参数3:匿名函数
	还是父级标签调用
	jq对象.on("","",function(){   //可以给未来元素绑定事件
		
	})
	
